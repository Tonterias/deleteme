public class App {
    // public static void main(String[] args) throws Exception {
    public static void main(String[] args) {
        System.out.println(validate("123")); // 1230 expected:<true> but was:<false>
        // 123 es false
    }

    public static boolean validate(String n) {
        char[] chars = n.toCharArray();
        int sum = 0;
        for (int i = 0; i <= chars.length - 1; i++) {
            if (i != chars.length - 1 && i % 2 == 0) {
                int oddDigit = Character.getNumericValue(chars[i]);
                int doubleDigit = oddDigit * 2;
                if (doubleDigit > 9) {
                    doubleDigit = doubleDigit - 9;
                }
                sum = sum + doubleDigit;
                chars[i] = Character.forDigit(doubleDigit, 10);
            } else {
                sum = sum + Character.getNumericValue(chars[i]);
            }
        }
        return sum % 10 == 0;
    }
}

// Double every other digit, scanning from right to left, starting 
// from the second digit (from the right).

// Another way to think about it is: if there are an even number of 
// digits, double every other digit starting with the first; if there
//  are an odd number of digits, double every other digit starting 
//  with the second:

// 1714 ==> [1*, 7, 1*, 4] ==> [2, 7, 2, 4]

// 12345 ==> [1, 2*, 3, 4*, 5] ==> [1, 4, 3, 8, 5]

// 891 ==> [8, 9*, 1] ==> [8, 18, 1]
// If a resulting number is greater than 9, replace it with the sum of its own digits (which is the same as subtracting 9 from it):

// [8, 18*, 1] ==> [8, (1+8), 1] ==> [8, 9, 1]

// or:

// [8, 18*, 1] ==> [8, (18-9), 1] ==> [8, 9, 1]
// Sum all of the final digits:

// [8, 9, 1] ==> 8 + 9 + 1 = 18
// Finally, take that sum and divide it by 10. If the remainder equals zero, the original credit card number is valid.
